from collections import deque
from tkinter import Tk, PhotoImage, Label
import math

def traercosto(arreglo, vertices, precede, ramal):
    costo = -1
    for fila in range(len(arreglo)):
        if fila == vertices.index(precede):
            for colum in range(len(arreglo[fila])):
                if colum == vertices.index(ramal):
                    costo = int(arreglo[fila][colum])
                    break
            break
    return costo

def DIJKSTRA(Grafo, Puntos, vCuerda, distTo, star, destin):
    Abierto = deque([])
    Cerrado = deque([])

    inicial = [ star , 0 , "/" ]
    Abierto.append(inicial)
    distTo[Puntos.index(star)] = 0

    #print("OpenList=",Abierto)

#"""
    while len(Abierto) != 0:

        for i in range(len(Abierto)):
            if i == 0:
                imin = i
                pesomin = Abierto[i][1]
            else:
                if Abierto[i][1] < pesomin:
                    imin = i
                    pesomin = Abierto[i][1]

        nodominimo = Abierto[imin]
        #print("nodominimo=",nodominimo)
        #print("Del nodominino solo Nodo",nodominimo[0])

        Abierto.remove(nodominimo)
        #print("Abierto=",Abierto)

        #"""
        if nodominimo[0] == destin:
            Cerrado.append(nodominimo)
            print()
            print("ClosedList =", Cerrado)
            Solucion = deque([])
            Solucion.appendleft(Cerrado[len(Cerrado)-1][0])
            Solucion.appendleft(Cerrado[len(Cerrado)-1][2])
            nodoprecedente = Cerrado[len(Cerrado)-1][2]
            for i in range(len(Cerrado)-1,0,-1):
                if nodoprecedente != Cerrado[0][0]:
                    if Cerrado[i][0] == nodoprecedente:
                        #Solucion.appendleft(Cerrado[i][0])
                        Solucion.appendleft(Cerrado[i][2])
                        nodoprecedente = Cerrado[i][2]
                else: break
            print()
            print("Ruta-SoluciÃ³n =",*Solucion)
            print("Costo de "+Cerrado[0][0]+" a "+Cerrado[len(Cerrado)-1][0]+" =", Cerrado[len(Cerrado)-1][1])
            break
        else:
            for i in range(len(Grafo)):
                if Grafo[i][0] == nodominimo[0]:
                    for j in range(len(Grafo[i])):
                        if Grafo[i][j] != nodominimo[0]:
                            hay = 0
                            if Cerrado:
                                for k in range(len(Cerrado)):
                                    if Cerrado[k][0] == Grafo[i][j]:
                                        hay = 1
                                        k = len(Cerrado) - 1
                            if hay == 0:
                                ponderacion = traercosto(vCuerda, Puntos, Grafo[i][0], Grafo[i][j])
                                print(Grafo[i][0]," ("+str(ponderacion).strip()+") ",Grafo[i][j])
                                ct = nodominimo[1] + ponderacion
                                if ct < distTo[Puntos.index(Grafo[i][j])]:
                                    distTo[Puntos.index(Grafo[i][j])] = ct
                                registro = [ Grafo[i][j] , distTo[Puntos.index(Grafo[i][j])] , Grafo[i][0] ]
                                Abierto.append(registro)
                    break
            Cerrado.append(nodominimo)
            #print("Cerrado=",Cerrado)
            #print("Abierto=",Abierto)
            #print("distTo=",distTo)
            #input("Press Enter to continue...")
        #"""
#"""

def valin(listavln, nodo):
    existe = True;
    for i in range(len(listavln)):
        if nodo == listavln[i]:
            existe = False
            i = len(listavln)
    return existe

def disable_event():
    pass

ventana = Tk()
ventana.attributes('-fullscreen', True)
w = ventana.winfo_screenwidth()
ventana.attributes('-fullscreen', False)
ventana.overrideredirect(True)
ventana.geometry("410x189")
posicionderecha = w - 410
ventana.geometry( "+%d+0" % (posicionderecha) )
ventana.resizable(width=False, height=False)
imagen = PhotoImage(file="grafo.png")
fondo = Label(ventana,image=imagen).place(x=0,y=0)
ventana.protocol("WM_DELETE_WINDOW", disable_event)

Arbol = deque([ ["A","B","C","D"],
                ["B","C","E","F"],
                ["C","A","E"],
                ["D","C"],
                ["E","D","G"],
                ["F","H"],
                ["G","E","F"],
                ["H","G"] ])

Vertices = deque(   ["A", "B", "C", "D", "E" , "F", "G", "H"]   )

Costos = deque([    ["0", "2", "1", "4"],                           #A
                    ["X", "0", "5", "X", "10", "2"],                #B
                    ["9", "X", "0", "X", "11"],                     #C
                    ["X", "X", "2", "0"],                           #D
                    ["X", "X", "X", "7", "0" , "X", "1"],           #E
                    ["X", "X", "X", "X", "X" , "0", "X", "3"],      #F
                    ["X", "X", "X", "X", "3" , "2", "0"],           #G
                    ["X", "X", "X", "X", "X" , "X", "1", "0"]    ]) #H

CMC = deque ([math.inf,math.inf,math.inf,math.inf,math.inf,math.inf,math.inf,math.inf])

print("Todo el Arbol: ", Arbol)
nodos = ""
for i in Vertices: nodos += " " + i[0]
print("Nodos disponibles:{}".format(nodos))

valor = True
while valor:
    ns = input("Ingrese Nodo Star: ").strip().upper()
    valor = valin(Vertices, ns)
    if valor :
        print("*** {} no es Nodo disponible ***".format(ns))

valor = True
while valor:
    nd = input("Ingrese Nodo Destination: ").strip().upper()
    valor = valin(Vertices, nd)
    if valor :
        print("*** {} no es Nodo disponible ***".format(nd))

DIJKSTRA(Arbol,Vertices,Costos,CMC,ns,nd)

print()
input("Pulse una tecla para salir...")
ventana.destroy()
